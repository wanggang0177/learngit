python:
可变参数表示：def calc(*numbers): 参数可以传入任意个
参数默认值：def enroll(name, gender, age=6, city='Beijing'):
关键字参数：def person(name, age, **kw):
    调用：person('Adam', 45, gender='M', job='Engineer')

2.7不支持：3.0以上支持
命名关键字参数：def person(name, age, *, city, job):
    关键字参数只接受“city”，“job”

高阶函数：
即：函数可以当作参数传入另外一个函数中
例如：
def add(x, y, f):
    return f(x) + f(y)
函数名称也是一个变量，它指向函数对象本身，
例如：abs（）函数 abs = 10以后，abs（10）就无效了

map(),reduce()函数：

匿名函数：关键字lambda表示匿名函数，冒号前面的x表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
例如：f = lambda x: x * x

python：private变量和方法用前加“_”表示，Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量

继承（可以多继承）：任何时候，如果没有合适的类可以继承，就继承自object类
class Animal(object):
class Dog(Animal): Dog继承Animal，Animal继承Object
获取对象属性，设置对象属性以及查看对象属性：getattr()、setattr()以及hasattr()；python可以动态给对象加入属性和方法，（这就是动态语言和静态语言的最大区别）

**继承与java区别**
python通过多继承，而java则是单继承然后通过实现多个接口，从以上看python不是存粹的面向对象编程；
#父类
class Animal(object):
    pass
# 大类:
class Mammal(Animal):
    pass
#行为类（Mixin）
class RunnableMixin(object):
    def run(self):
        print('Running...')
#狗即是动物，也会奔跑的行为
class Dog(Mammal, Runnable):
    pass



限制给对象添加属性的方法：
class Student(object):
...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称

@property神奇的功能：
class Student(object):
    #可以把方法变成属性使用，方法名“score”即为属性名
    @property
    def score(self):
        return self._score
    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
>>> s = Student()
>>> s.score = 60 # OK，实际转化为s.set_score(60)

如果只有@property，没有对应的@property.setter该属性为只读属性
